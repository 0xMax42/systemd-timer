# ========================
# ğŸ“¦ Upload Assets Template
# ========================
# Dieser Workflow wird automatisch ausgelÃ¶st, wenn ein Release
# in Gitea verÃ¶ffentlicht wurde (event: release.published).
#
# Er dient dem Zweck, Release-Artefakte (wie z.â€¯B. Binary-Dateien,
# Changelogs oder Build-Zips) nachtrÃ¤glich mit dem Release zu verknÃ¼pfen.
#
# Voraussetzung: Zwei Shell-Skripte liegen im Projekt:
# - .gitea/scripts/get-release-id.sh â†’ ermittelt Release-ID per Tag
# - .gitea/scripts/upload-asset.sh â†’ lÃ¤dt Datei als Release-Asset hoch
#
# --------------------------------------

name: Upload Assets

on:
  release:
    types: [published] # Nur bei VerÃ¶ffentlichung eines Releases (nicht bei EntwÃ¼rfen)

jobs:
  upload-assets:
    runs-on: ubuntu-latest

    steps:
      # ğŸ“¥ Checke den Stand des Repos aus, exakt auf dem verÃ¶ffentlichten Tag
      # So ist garantiert, dass die Artefakte dem Zustand des Releases entsprechen.
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }} # z.â€¯B. "v1.2.3"
          fetch-depth: 0 # vollstÃ¤ndige Git-Historie (fÃ¼r z.â€¯B. git-cliff, logs etc.)

      # ğŸ†” Hole die Release-ID basierend auf dem Tag
      # Die ID wird als Umgebungsvariable RELEASE_ID Ã¼ber $GITHUB_ENV verfÃ¼gbar gemacht.
      - name: Get Release ID from tag
        run: .gitea/scripts/get-release-id.sh "${{ github.event.release.tag_name }}"

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - name: Build application
        run: deno task build

      - name: Upload CHANGELOG.md as RELEASE-NOTES.md
        run: .gitea/scripts/upload-asset.sh ./dist/systemd-timer systemd-timer
